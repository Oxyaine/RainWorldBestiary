{
  "api/RainWorldBestiary.Bestiary.Extensions.html": {
    "href": "api/RainWorldBestiary.Bestiary.Extensions.html",
    "title": "Class Bestiary.Extensions | Rain World Bestiary",
    "keywords": "Class Bestiary.Extensions Namespace RainWorldBestiary Assembly RainWorldBestiary.dll A class with some extension methods, to add some partial support for adding your own entries through code public static class Bestiary.Extensions Inheritance object Bestiary.Extensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddEntry(string, Entry, EntriesTab) Adds an entry to the Bestiary public static void AddEntry(string owningModID, Entry entry, EntriesTab tab) Parameters owningModID string The ID (that is set in the modinfo.json file) of the mod that owns this entry entry Entry The entry that is to be added tab EntriesTab The tab the entry is in AddPlugin(string, BestiaryPlugin) Adds a plugin to the bestiary public static void AddPlugin(string owningModID, BestiaryPlugin plugin) Parameters owningModID string The ID (that is set in the modinfo.json file) of the mod that owns this entry plugin BestiaryPlugin An instance of the plugin type AddTab(string, EntriesTab) Adds a tab of entries to the Bestiary public static void AddTab(string owningModID, EntriesTab tab) Parameters owningModID string The ID (that is set in the modinfo.json file) of the mod that owns this entry tab EntriesTab The tab the entry is in"
  },
  "api/RainWorldBestiary.Bestiary.Settings.html": {
    "href": "api/RainWorldBestiary.Bestiary.Settings.html",
    "title": "Class Bestiary.Settings | Rain World Bestiary",
    "keywords": "Class Bestiary.Settings Namespace RainWorldBestiary Assembly RainWorldBestiary.dll The class that holds all the remix menu options and their current values public static class Bestiary.Settings Inheritance object Bestiary.Settings Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields ConsistentTitleSpacing Makes the generated title in the menus use consistent spacing between each character, which brings them further apart, but makes the spacing more consistent. public static Configurable<bool> ConsistentTitleSpacing Field Value Configurable<bool> PerformTextAnimations Whether to perform an animation when going to read an entry public static Configurable<bool> PerformTextAnimations Field Value Configurable<bool> ShowManualButton Whether to show the \"Manual\" button in the main bestiary menu public static Configurable<bool> ShowManualButton Field Value Configurable<bool> ShowModuleLockPips Whether to show the little pips in the top right while reading an entry, to show how many modules of the bestiary you have unlocked public static Configurable<bool> ShowModuleLockPips Field Value Configurable<bool> ShowTitleIcons Determines whether the icons of the entry should appear next to the title (that appears when reading the entry) public static Configurable<bool> ShowTitleIcons Field Value Configurable<bool> UnlockAllEntries Whether all bestiary entries should be unlocked and completely readable public static Configurable<bool> UnlockAllEntries Field Value Configurable<bool> Properties MenuFadeTimeSeconds The time the bestiary menu's should take to fade between each other, does not affect non bestiary menus public static float MenuFadeTimeSeconds { get; } Property Value float"
  },
  "api/RainWorldBestiary.Bestiary.html": {
    "href": "api/RainWorldBestiary.Bestiary.html",
    "title": "Class Bestiary | Rain World Bestiary",
    "keywords": "Class Bestiary Namespace RainWorldBestiary Assembly RainWorldBestiary.dll The main class for the bestiary, everything should be accessible from this class public static class Bestiary Inheritance object Bestiary Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields SpecialIDsLogic Special logic to apply to certain IDs, for example, CicadaA and CicadaB (Squidacada's ID's) have custom logic to remove the A and B so its just Cicada public static Dictionary<string, Func<string, string>> SpecialIDsLogic Field Value Dictionary<string, Func<string, string>> Methods AddOrIncreaseToken(AbstractCreature, UnlockTokenType, bool, params string[]) Checks if ModuleUnlocks contains the UnlockTokenType for the given creature ID, if it does, it increases the token, otherwise adds it as a new token public static void AddOrIncreaseToken(AbstractCreature creature, UnlockTokenType tokenType, bool alwaysAddToken = false, params string[] SpecialData) Parameters creature AbstractCreature tokenType UnlockTokenType The type of token alwaysAddToken bool Whether to always add this token, regardless of whether this token will be used SpecialData string[] The special data to add onto the token Remarks The token will only get added, if the token takes part in unlocking a description module, so if the token will never unlock a module, it wont get added. You can override this by setting alwaysAddToken to true. AddOrIncreaseToken(Creature, UnlockTokenType, bool, params string[]) Checks if ModuleUnlocks contains the UnlockTokenType for the given creature ID, if it does, it increases the token, otherwise adds it as a new token public static void AddOrIncreaseToken(Creature creature, UnlockTokenType tokenType, bool alwaysAddToken = false, params string[] SpecialData) Parameters creature Creature tokenType UnlockTokenType The type of token alwaysAddToken bool Whether to always add this token, regardless of whether this token will be used SpecialData string[] The special data to add onto the token Remarks The token will only get added, if the token takes part in unlocking a description module, so if the token will never unlock a module, it wont get added. You can override this by setting alwaysAddToken to true. AddOrIncreaseToken(string, UnlockTokenType, bool, params string[]) Checks if ModuleUnlocks contains the UnlockTokenType for the given creature ID, if it does, it increases the token, otherwise adds it as a new token public static void AddOrIncreaseToken(string creatureID, UnlockTokenType tokenType, bool alwaysAddToken = false, params string[] SpecialData) Parameters creatureID string The ID of the creature this token is for tokenType UnlockTokenType The type of token alwaysAddToken bool Whether to always add this token, regardless of whether this token will be used SpecialData string[] The special data to add onto the token Remarks The token will only get added, if the token takes part in unlocking a description module, so if the token will never unlock a module, it wont get added. You can override this by setting alwaysAddToken to true. GetCreatureUnlockName(AbstractCreature, bool) Gets the creatures name through AbstractCreature.creatureTemplate and removes all white space characters public static string GetCreatureUnlockName(AbstractCreature creature, bool useSpecialIdLogic = true) Parameters creature AbstractCreature The creature to get the ID of useSpecialIdLogic bool Whether to check through SpecialIDsLogic for any additional logic that should be applied Returns string GetCreatureUnlockName(Creature, bool) public static string GetCreatureUnlockName(Creature creature, bool useSpecialIdLogic = true) Parameters creature Creature useSpecialIdLogic bool Returns string GetEntryByReferenceID(string) Gets an entry using a reference id, Reference IDs contain the name of the tab to look in (case sensitive), plus the name of the entry to look for (also case sensitive, this is the name given to the entry, not the translated result), separated by either a forward or backward slash. Valid IDs include: Rain World/creaturetype_Fly Rain World\\creaturetype_CicadaA Downpour/The Gourmand Invalid IDs include rain world/creaturetype_Fly RainWorld/creaturetype_Fly /Rain World/creaturetype_Fly public static Entry GetEntryByReferenceID(string refID) Parameters refID string Returns Entry The entry that was found, if no entry was found, null is returned IsCreatureUnlocked(AbstractCreature) Checks if this creature is found in either the CreatureUnlockIDs or RainWorldBestiary.Bestiary.CreatureUnlockIDsOverride public static bool IsCreatureUnlocked(AbstractCreature creature) Parameters creature AbstractCreature Returns bool IsCreatureUnlocked(Creature) Checks if this creature is found in either the CreatureUnlockIDs or RainWorldBestiary.Bestiary.CreatureUnlockIDsOverride public static bool IsCreatureUnlocked(Creature creature) Parameters creature Creature Returns bool IsCreatureUnlocked(string) Checks if this creature is found in either the CreatureUnlockIDs or RainWorldBestiary.Bestiary.CreatureUnlockIDsOverride public static bool IsCreatureUnlocked(string creatureId) Parameters creatureId string Returns bool IsUnlockTokenValid(CreatureUnlockToken) Checks if the given token is in either AutoModuleUnlocks or ModuleUnlocks public static bool IsUnlockTokenValid(CreatureUnlockToken unlockToken) Parameters unlockToken CreatureUnlockToken Returns bool Remarks Returns true if the count is equal to or greater than the value in the registered token Does not take into account if UnlockAllEntries is toggled UnlockCreature(AbstractCreature) public static void UnlockCreature(AbstractCreature creature) Parameters creature AbstractCreature UnlockCreature(Creature) Adds this creatureID to the CreatureUnlockIDs list if its not already added public static void UnlockCreature(Creature creature) Parameters creature Creature Automatically gets run through GetCreatureUnlockName(Creature, bool) UnlockCreature(string) Adds this creatureID to the CreatureUnlockIDs list if its not already added public static void UnlockCreature(string creatureID) Parameters creatureID string"
  },
  "api/RainWorldBestiary.Extensions.html": {
    "href": "api/RainWorldBestiary.Extensions.html",
    "title": "Class Extensions | Rain World Bestiary",
    "keywords": "Class Extensions Namespace RainWorldBestiary Assembly RainWorldBestiary.dll A class with some extensions to speed up certain tasks public static class Extensions Inheritance object Extensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ARGBToHexString(Color) Converts this Color into a hex color string, with 8 characters in the string, representing ARGB public static string ARGBToHexString(this Color color) Parameters color Color Returns string ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) Checks if this list contains all the values in values public static bool ContainsAll<T>(this IEnumerable<T> list, IEnumerable<T> values) Parameters list IEnumerable<T> values IEnumerable<T> Returns bool True if all items in values are found in this list Type Parameters T ContainsAll<T>(List<T>, T[]) Checks if this list contains all the values in values public static bool ContainsAll<T>(this List<T> list, T[] values) Parameters list List<T> values T[] Returns bool True if all items in values are found in this list Type Parameters T ContainsAny(List<string>, List<string>) Checks if source contains any of the strings in values public static bool ContainsAny(this List<string> source, List<string> values) Parameters source List<string> values List<string> Returns bool ContainsAny<T>(IEnumerable<T>, IEnumerable<T>) Checks if source contains any of the strings in values public static bool ContainsAny<T>(this IEnumerable<T> source, IEnumerable<T> values) Parameters source IEnumerable<T> values IEnumerable<T> Returns bool Type Parameters T GetRandom<T>(IEnumerable<T>) Gets a random item in the collection public static T GetRandom<T>(this IEnumerable<T> values) Parameters values IEnumerable<T> Returns T Type Parameters T GetRandom<T>(IEnumerable<T>, int) Gets a number of random items from the collection public static T[] GetRandom<T>(this IEnumerable<T> values, int amountToGet) Parameters values IEnumerable<T> amountToGet int Returns T[] Type Parameters T HexToColor(string) Converts this hex color string into a Color public static Color HexToColor(this string hex) Parameters hex string Returns Color IndexOf(string, char, int, bool) public static int IndexOf(this string text, char value, int startIndex, bool ignoreWithinQuotes) Parameters text string value char startIndex int ignoreWithinQuotes bool Whether to ignore if the character is found within double quotes Returns int RGBToHexString(Color) Converts this Color into a hex color string, with 6 characters in the string, representing RGB public static string RGBToHexString(this Color color) Parameters color Color Returns string SplitIntoGroups(string, int) Splits the string into groups the size of groupCount, if the string cannot be split evenly, the last group may contain an unexpected amount of characters public static string[] SplitIntoGroups(this string text, int groupCount) Parameters text string groupCount int Returns string[] ToHSL(Color) Converts this RGB color to a HSL color public static HSLColor ToHSL(this Color color) Parameters color Color Returns HSLColor ToVector2(IntVector2) Converts this RWCustom.IntVector2 into a UnityEngine.Vector2 public static Vector2 ToVector2(this IntVector2 intVector) Parameters intVector IntVector2 Returns Vector2 ToVector2(WorldCoordinate) Gets the x and y of this WorldCoordinate and returns it as a Vector2 public static Vector2 ToVector2(this WorldCoordinate coordinate) Parameters coordinate WorldCoordinate Returns Vector2 WrapText(string, int) Wrap the text to go along multiple lines (word wrap). If the current letter count exceeds wrapCount it adds a new line (\\n) to the string public static string WrapText(this string text, int wrapCount) Parameters text string wrapCount int Returns string"
  },
  "api/RainWorldBestiary.Hooks.HooksUtilities.html": {
    "href": "api/RainWorldBestiary.Hooks.HooksUtilities.html",
    "title": "Class HooksUtilities | Rain World Bestiary",
    "keywords": "Class HooksUtilities Namespace RainWorldBestiary.Hooks Assembly RainWorldBestiary.dll A couple utilities that may help with tracking creatures for unlocks public static class HooksUtilities Inheritance object HooksUtilities Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IgnoreID(int, UnlockTokenType, float, bool, bool) Checks if the ID is ignored, if its not, it will be added public static bool IgnoreID(int id, UnlockTokenType typeToIgnore, float timeSeconds = -50, bool addIfNotFound = true, bool overridePreviousTime = false) Parameters id int typeToIgnore UnlockTokenType timeSeconds float addIfNotFound bool overridePreviousTime bool Returns bool True if the creature should be ignored, otherwise false Remarks timeSeconds: The time the id should be ignored for when its added IsCreatureOnCamera(AbstractCreature) Checks if the given creature is currently visible on screen public static bool IsCreatureOnCamera(AbstractCreature creature) Parameters creature AbstractCreature Returns bool IsCreatureOnCamera(Creature) Checks if the given creature is currently visible on screen public static bool IsCreatureOnCamera(Creature creature) Parameters creature Creature Returns bool IsPositionOnCamera(Vector2) Checks if the given position is currently visible on screen public static bool IsPositionOnCamera(Vector2 position) Parameters position Vector2 Returns bool"
  },
  "api/RainWorldBestiary.Hooks.html": {
    "href": "api/RainWorldBestiary.Hooks.html",
    "title": "Namespace RainWorldBestiary.Hooks | Rain World Bestiary",
    "keywords": "Namespace RainWorldBestiary.Hooks Classes HooksUtilities A couple utilities that may help with tracking creatures for unlocks"
  },
  "api/RainWorldBestiary.Plugins.BestiaryPlugin.html": {
    "href": "api/RainWorldBestiary.Plugins.BestiaryPlugin.html",
    "title": "Class BestiaryPlugin | Rain World Bestiary",
    "keywords": "Class BestiaryPlugin Namespace RainWorldBestiary.Plugins Assembly RainWorldBestiary.dll The base class for a custom bestiary plugin, that is only loaded if the bestiary is active public abstract class BestiaryPlugin Inheritance object BestiaryPlugin Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors BestiaryPlugin() protected BestiaryPlugin() Methods Awake() Called when the plugin is loaded public virtual void Awake() FixedUpdate() Called every fixed update, usually around 50 times a second public virtual void FixedUpdate() Start() Called when the plugin is loaded, shortly after awake public virtual void Start() Update() Called every frame public virtual void Update()"
  },
  "api/RainWorldBestiary.Plugins.html": {
    "href": "api/RainWorldBestiary.Plugins.html",
    "title": "Namespace RainWorldBestiary.Plugins | Rain World Bestiary",
    "keywords": "Namespace RainWorldBestiary.Plugins Classes BestiaryPlugin The base class for a custom bestiary plugin, that is only loaded if the bestiary is active"
  },
  "api/RainWorldBestiary.Translator.html": {
    "href": "api/RainWorldBestiary.Translator.html",
    "title": "Class Translator | Rain World Bestiary",
    "keywords": "Class Translator Namespace RainWorldBestiary Assembly RainWorldBestiary.dll A class for custom translation behaviour public static class Translator Inheritance object Translator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Translate(string) Translates this text using the short strings dictionary public static string Translate(string text) Parameters text string Returns string"
  },
  "api/RainWorldBestiary.Types.CreatureUnlockToken.html": {
    "href": "api/RainWorldBestiary.Types.CreatureUnlockToken.html",
    "title": "Class CreatureUnlockToken | Rain World Bestiary",
    "keywords": "Class CreatureUnlockToken Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll An unlock token, that can be used to detect whether a DescriptionModule is unlocked, similar to UnlockToken but has a CreatureID string public class CreatureUnlockToken : UnlockToken, IEquatable<CreatureUnlockToken>, IEquatable<UnlockToken> Inheritance object UnlockToken CreatureUnlockToken Implements IEquatable<CreatureUnlockToken> IEquatable<UnlockToken> Inherited Members UnlockToken.TokenType UnlockToken.Count UnlockToken.SpecialData UnlockToken.Equals(UnlockToken) UnlockToken.Equals(UnlockToken, bool) UnlockToken.ContainsSpecialData(List<string>) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors CreatureUnlockToken(CreatureUnlockToken) Copy Operator public CreatureUnlockToken(CreatureUnlockToken other) Parameters other CreatureUnlockToken CreatureUnlockToken(string, UnlockTokenType, byte) public CreatureUnlockToken(string creatureID, UnlockTokenType tokenType, byte value = 1) Parameters creatureID string The ID of the creature that to look for tokenType UnlockTokenType The type of token to look for value byte The amount of times this token should be registered before this is considered unlocked Fields CreatureID The ID of the creature this unlock token applies to public string CreatureID Field Value string OperationAgainstCurrentValue The operation this unlock token will perform against the current unlock value of the token public OperationType OperationAgainstCurrentValue Field Value OperationType Remarks For example, if the previous two tokens where valid, that means the current unlock value is true, since by the logic of the two previous tokens, the module should be unlocked. Then if this unlock tokens operation is \"or\", that it will check if the current unlock value OR this value is true, then set the result as the new current unlock value Methods Equals(CreatureUnlockToken) public bool Equals(CreatureUnlockToken other) Parameters other CreatureUnlockToken Returns bool Remarks Checks if the creature ID matches, then if the token type matches, ignores Count Equals(CreatureUnlockToken, bool) public bool Equals(CreatureUnlockToken other, bool checkSpecialData) Parameters other CreatureUnlockToken checkSpecialData bool Returns bool Remarks Checks if the token type matches and, if checkSpecialData is enabled, if other's SpecialData is found in this SpecialData, ignores Count Equals(object) Checks if both objects are CreatureUnlockToken, then compares them using Equals(CreatureUnlockToken) public override bool Equals(object obj) Parameters obj object Returns bool Remarks Equals(CreatureUnlockToken) Checks if the creature ID matches, then if the token type matches, ignores Count GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Creature ID + Token Type + Value"
  },
  "api/RainWorldBestiary.Types.Description.html": {
    "href": "api/RainWorldBestiary.Types.Description.html",
    "title": "Class Description | Rain World Bestiary",
    "keywords": "Class Description Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A class representing an entries description, saved as a DescriptionModule array, but can be used as a string public class Description : ICollection<DescriptionModule>, IEnumerable<DescriptionModule>, IEnumerable Inheritance object Description Implements ICollection<DescriptionModule> IEnumerable<DescriptionModule> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Extensions.ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) Extensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>) Extensions.GetRandom<T>(IEnumerable<T>) Extensions.GetRandom<T>(IEnumerable<T>, int) Constructors Description() public Description() Description(Description) Copy Operator public Description(Description other) Parameters other Description Description(params DescriptionModule[]) public Description(params DescriptionModule[] modules) Parameters modules DescriptionModule[] Description(IEnumerable<DescriptionModule>) public Description(IEnumerable<DescriptionModule> modules) Parameters modules IEnumerable<DescriptionModule> Description(string) Creates a new description with one module that defaults to unlocked public Description(string description) Parameters description string Properties Count Gets the amount of description modules in this description public int Count { get; } Property Value int IsReadOnly This is unused in Description public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets a module at the given index public DescriptionModule this[int index] { get; set; } Parameters index int Property Value DescriptionModule Methods Add(DescriptionModule) public void Add(DescriptionModule item) Parameters item DescriptionModule Clear() public void Clear() Contains(DescriptionModule) public bool Contains(DescriptionModule item) Parameters item DescriptionModule Returns bool CopyTo(DescriptionModule[], int) public void CopyTo(DescriptionModule[] array, int arrayIndex) Parameters array DescriptionModule[] arrayIndex int GetEnumerator() public IEnumerator<DescriptionModule> GetEnumerator() Returns IEnumerator<DescriptionModule> Remove(DescriptionModule) public bool Remove(DescriptionModule item) Parameters item DescriptionModule Returns bool ToString() Returns this description as a string where only the parts of the entry that are visible are added public override string ToString() Returns string Operators implicit operator Description(DescriptionModule[]) public static implicit operator Description(DescriptionModule[] modules) Parameters modules DescriptionModule[] Returns Description implicit operator Description(List<DescriptionModule>) public static implicit operator Description(List<DescriptionModule> modules) Parameters modules List<DescriptionModule> Returns Description"
  },
  "api/RainWorldBestiary.Types.DescriptionModule.html": {
    "href": "api/RainWorldBestiary.Types.DescriptionModule.html",
    "title": "Class DescriptionModule | Rain World Bestiary",
    "keywords": "Class DescriptionModule Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A piece of a description, can be given a lock ID to lock this part of an entries description public class DescriptionModule Inheritance object DescriptionModule Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DescriptionModule() public DescriptionModule() DescriptionModule(DescriptionModule) Copy Operator public DescriptionModule(DescriptionModule other) Parameters other DescriptionModule DescriptionModule(string, CreatureUnlockToken, bool) public DescriptionModule(string body, CreatureUnlockToken unlockToken, bool newLine = false) Parameters body string The text of this part of the entries description unlockToken CreatureUnlockToken The unlock token of this description module, used to determine what requirements need to be met to unlock this part of the description newLine bool Whether this module and the previous module should be separated by a new line '\\n', otherwise just separates with a space. DescriptionModule(string, bool) public DescriptionModule(string body, bool newLine = false) Parameters body string The text of this part of the entries description newLine bool Whether this module and the previous module should be separated by a new line '\\n', otherwise just separates with a space. Fields Body The text of this part of the entries description public string Body Field Value string ModuleUnlockedCondition The condition that specifies whether this entry is visible or not, if this returns true, then the entry is visible. You can leave this as the default, or set your own custom condition. public Func<DescriptionModule, bool> ModuleUnlockedCondition Field Value Func<DescriptionModule, bool> Remarks Defaults to DefaultModuleUnlockedCondition(DescriptionModule) NewLine Whether this module and the previous module should be separated by a new line '\\n', otherwise just separates with a space. public bool NewLine Field Value bool Translate Whether this modules text will get run through the in game translator, if no translation is found, then the text will be placed public bool Translate Field Value bool UnlockPipColor The Color of the Unlock Pip for this Module public Color UnlockPipColor Field Value Color UnlockTokens All the unlock tokens of this description module, used to determine what requirements need to be met to unlock this part of the description public CreatureUnlockToken[] UnlockTokens Field Value CreatureUnlockToken[] Properties ModuleUnlocked Returns true if the module is unlocked, else false public bool ModuleUnlocked { get; } Property Value bool Methods CheckIfUnlockTokenValid(CreatureUnlockToken) Checks if this creature unlock token is null, the token type is none, or if it returns true when run through IsUnlockTokenValid(CreatureUnlockToken). public static bool CheckIfUnlockTokenValid(CreatureUnlockToken unlockToken) Parameters unlockToken CreatureUnlockToken Returns bool True if either of the conditions above is met DefaultModuleUnlockedCondition(DescriptionModule) Checks all the UnlockIDs to determine if this module is visible or not public static bool DefaultModuleUnlockedCondition(DescriptionModule info) Parameters info DescriptionModule Returns bool ToString() Returns Body, if Translate is true, Body will get run through the in game translator first public override string ToString() Returns string Body, translated if Translate is true"
  },
  "api/RainWorldBestiary.Types.EntriesTab.html": {
    "href": "api/RainWorldBestiary.Types.EntriesTab.html",
    "title": "Class EntriesTab | Rain World Bestiary",
    "keywords": "Class EntriesTab Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A class representing a tab full of entries in the bestiary public class EntriesTab Inheritance object EntriesTab Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors EntriesTab() Creates an empty EntriesTab public EntriesTab() EntriesTab(EntriesTab) Copy Operator public EntriesTab(EntriesTab other) Parameters other EntriesTab EntriesTab(EntriesTab, params Entry[]) Copy Operator public EntriesTab(EntriesTab other, params Entry[] entries) Parameters other EntriesTab entries Entry[] EntriesTab(IEnumerable<Entry>) Creates an EntriesTab with all entries in entries as the entries public EntriesTab(IEnumerable<Entry> entries) Parameters entries IEnumerable<Entry> EntriesTab(string, params Entry[]) Creates an EntriesTab with all entries in entries as the entries public EntriesTab(string tabName, params Entry[] entries) Parameters tabName string entries Entry[] EntriesTab(string, IEnumerable<Entry>) Creates an EntriesTab with all entries in entries as the entries public EntriesTab(string tabName, IEnumerable<Entry> entries) Parameters tabName string entries IEnumerable<Entry> Fields Name The name of this tab public string Name Field Value string RequiredMods The mods (by ids), that are required to be active for this tab to be visible public string[] RequiredMods Field Value string[] TitleSprite The title image that gets displayed at the top when of the screen when viewing the tab, if set to null, or if the image isn't found, some generated text will be placed instead public TitleSprite TitleSprite Field Value TitleSprite Remarks By title, I mean the name of the tab that is visible at the top while viewing entries in the tab Properties Count Gets the amount of entries in this tab public int Count { get; } Property Value int this[int] Gets or sets an entry at the given index public Entry this[int index] { get; set; } Parameters index int Property Value Entry this[string] Gets an entry with the given name public Entry this[string entryName] { get; } Parameters entryName string Property Value Entry Exceptions KeyNotFoundException Methods Add(Entry) Adds a new entry to this tab public void Add(Entry item) Parameters item Entry Add(string, EntryInfo, string) Adds a new entry to this tab public void Add(string entryName, EntryInfo info, string owningModID = null) Parameters entryName string info EntryInfo owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Add(string, string, string, Description, string) Adds a new entry to this tab public void Add(string entryName, string unlockID, string iconAtlasName, Description description, string owningModID = null) Parameters entryName string unlockID string iconAtlasName string description Description owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Add(string, string, string, string, string) Adds a new entry to this tab public void Add(string entryName, string unlockID, string iconAtlasName, string description, string owningModID = null) Parameters entryName string unlockID string iconAtlasName string description string owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled AddRange(IEnumerable<Entry>) Adds all the entries from the collection into this tab public void AddRange(IEnumerable<Entry> items) Parameters items IEnumerable<Entry> AddRange(IEnumerator<Entry>) Adds all the entries from the collection into this tab public void AddRange(IEnumerator<Entry> items) Parameters items IEnumerator<Entry> Clear() Clears this tab of all its entries public void Clear() Contains(Entry) Checks if this tab contains the given entry public bool Contains(Entry item) Parameters item Entry Returns bool Contains(string) Determines whether this tab contains an entry with the given name public bool Contains(string entryName) Parameters entryName string The name of the entry to check for Returns bool CopyTo(Entry[], int) public void CopyTo(Entry[] array, int arrayIndex) Parameters array Entry[] arrayIndex int GetEnumerator() public IEnumerator<Entry> GetEnumerator() Returns IEnumerator<Entry> MergeWith(in EntriesTab) Adds tab's entries to this this If this TitleImage is null, it gets replaced with tab's TitleImage If this TabMenuProcessID is set to the default, it sets it to tab's TabMenuProcessID public void MergeWith(in EntriesTab tab) Parameters tab EntriesTab Remove(Entry) Removes the given entry from this tab public bool Remove(Entry item) Parameters item Entry Returns bool RemoveAt(int) Removes an entry at the specified index public void RemoveAt(int index) Parameters index int TryGet(string, out Entry) Tries to get the entry with the given name public bool TryGet(string entryName, out Entry entry) Parameters entryName string entry Entry Returns bool True if the entry was found, otherwise false"
  },
  "api/RainWorldBestiary.Types.EntriesTabList.html": {
    "href": "api/RainWorldBestiary.Types.EntriesTabList.html",
    "title": "Class EntriesTabList | Rain World Bestiary",
    "keywords": "Class EntriesTabList Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A class that represents a list of EntriesTab public class EntriesTabList : ICollection<EntriesTab>, IEnumerable<EntriesTab>, IEnumerable Inheritance object EntriesTabList Implements ICollection<EntriesTab> IEnumerable<EntriesTab> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Extensions.ContainsAll<T>(IEnumerable<T>, IEnumerable<T>) Extensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>) Extensions.GetRandom<T>(IEnumerable<T>) Extensions.GetRandom<T>(IEnumerable<T>, int) Remarks Not using regular list since this allows more control such as preventing two EntriesTab with the same name Constructors EntriesTabList() public EntriesTabList() EntriesTabList(params EntriesTab[]) public EntriesTabList(params EntriesTab[] tabs) Parameters tabs EntriesTab[] The default tabs to add to this tab list Properties Count public int Count { get; } Property Value int IsReadOnly public bool IsReadOnly { get; } Property Value bool this[int] Gets the EntriesTab at the given index public EntriesTab this[int index] { get; } Parameters index int Property Value EntriesTab this[string] Gets a tab using its name public EntriesTab this[string tabName] { get; } Parameters tabName string Property Value EntriesTab Exceptions KeyNotFoundException Methods Add(EntriesTab) Adds a new tab of entries to this collection public void Add(EntriesTab item) Parameters item EntriesTab The item to add Add(EntriesTab, bool) Adds a new tab of entries to this collection public void Add(EntriesTab item, bool merge = false) Parameters item EntriesTab The item to add merge bool Whether to resolve the case that two tabs have the same name, by merging them together. Merges as per the rules of MergeWith(in EntriesTab) Add(string, params Entry[]) Adds a new tab of entries to this collection public void Add(string tabName, params Entry[] entries) Parameters tabName string entries Entry[] Add(string, bool, params Entry[]) Adds a new tab of entries to this collection public void Add(string tabName, bool merge, params Entry[] entries) Parameters tabName string merge bool Whether to resolve the case that two tabs have the same name, by merging them together. Merges as per the rules of MergeWith(in EntriesTab) entries Entry[] Add(string, IEnumerable<Entry>, TitleSprite, bool) Adds a new tab of entries to this collection public void Add(string tabName, IEnumerable<Entry> entries, TitleSprite titleSprite = null, bool merge = false) Parameters tabName string entries IEnumerable<Entry> titleSprite TitleSprite merge bool Whether to resolve the case that two tabs have the same name, by merging them together. Merges as per the rules of MergeWith(in EntriesTab) Clear() public void Clear() Contains(EntriesTab) public bool Contains(EntriesTab item) Parameters item EntriesTab Returns bool CopyTo(EntriesTab[], int) public void CopyTo(EntriesTab[] array, int arrayIndex) Parameters array EntriesTab[] arrayIndex int GetEnumerator() public IEnumerator<EntriesTab> GetEnumerator() Returns IEnumerator<EntriesTab> Remove(EntriesTab) public bool Remove(EntriesTab item) Parameters item EntriesTab Returns bool RemoveAt(int) public void RemoveAt(int index) Parameters index int TryGet(string, out EntriesTab) Tries to get the tab using its name public bool TryGet(string tabName, out EntriesTab tab) Parameters tabName string tab EntriesTab Returns bool True if the tab was found, otherwise false"
  },
  "api/RainWorldBestiary.Types.Entry.html": {
    "href": "api/RainWorldBestiary.Types.Entry.html",
    "title": "Class Entry | Rain World Bestiary",
    "keywords": "Class Entry Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A class representing an entry public class Entry : IEquatable<Entry> Inheritance object Entry Implements IEquatable<Entry> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Entry() public Entry() Entry(string, Description, string, string, string, string) public Entry(string name, Description description, string unlockID = \"\", string iconAtlasName = \"\", string lockedText = \"This entry is locked.\", string owningModID = null) Parameters name string The name of the entry description Description The main body of this entry unlockID string The ID that will be used to determine whether this entry is unlocked or not iconAtlasName string The name of the entry's icon in the atlas manager lockedText string The text that is shown when pressing on the entry while its locked owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Entry(string, EntryInfo, string) public Entry(string name, EntryInfo info, string owningModID = null) Parameters name string info EntryInfo The entry's info owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Entry(string, string) public Entry(string name, string owningModID = null) Parameters name string owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Entry(string, string, string, string, string, string) public Entry(string name, string description, string unlockID = \"\", string iconAtlasName = \"\", string lockedText = \"This entry is locked.\", string owningModID = null) Parameters name string The name of the entry description string The main body of this entry unlockID string The ID that will be used to determine whether this entry is unlocked or not iconAtlasName string The name of the entry's icon in the atlas manager lockedText string The text that is shown when pressing on the entry while its locked owningModID string The ID of the mod (id that is set in modinfo.json file) that this entry belongs to, set this if you'd like this entry to automatically unload when the mod gets disabled Fields Info The information of this entry, such as its unlock id, icon, scene to show while reading, and description public EntryInfo Info Field Value EntryInfo Name The name of this entry public readonly string Name Field Value string Properties Error A default entry that's just an error, is always unlocked, and serves as a placeholder that appears when another entry cant be loaded public static Entry Error { get; } Property Value Entry Methods Equals(Entry) Checks if this entry is the same as another entry public bool Equals(Entry other) Parameters other Entry Returns bool"
  },
  "api/RainWorldBestiary.Types.EntryInfo.html": {
    "href": "api/RainWorldBestiary.Types.EntryInfo.html",
    "title": "Class EntryInfo | Rain World Bestiary",
    "keywords": "Class EntryInfo Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll The contents of the entry file public class EntryInfo : IEquatable<EntryInfo> Inheritance object EntryInfo Implements IEquatable<EntryInfo> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors EntryInfo() public EntryInfo() EntryInfo(Description, string, string, string) public EntryInfo(Description description, string iD = \"\", string lockedText = \"This entry is locked.\", string entryIcon = \"\") Parameters description Description The body of this entry iD string The ID of this entry, if the ID is found in the unlocked entries dictionary, this entry will be made visible lockedText string The text / tip that is shown when attempting to read the entry while its locked, this could be anything you want, leave blank for no message. entryIcon string The name of the sprite in the atlas manager that will be used as the entry icon EntryInfo(string, string, string, string) Creates a new entry info with one description module that is by default visible public EntryInfo(string description, string iD = \"\", string lockedText = \"This entry is locked.\", string entryIcon = \"\") Parameters description string The body of this entry iD string The ID of this entry, if the ID is found in the unlocked entries dictionary, this entry will be made visible lockedText string The text / tip that is shown when attempting to read the entry while its locked, this could be anything you want, leave blank for no message. entryIcon string The name of the sprite in the atlas manager that will be used as the entry icon Fields BaseLockedText A constant defining the default text that is shown when attempting to read a locked entry public const string BaseLockedText = \"This entry is locked.\" Field Value string Description The body of this entry, when converted to string, only returns the parts of the entry that are visible public Description Description Field Value Description EntryColor The color of the entry's button and title image public HSLColor EntryColor Field Value HSLColor EntryIcons The name of the sprites in the atlas manager that will be used as the entry's icons public string[] EntryIcons Field Value string[] EntryUnlockedCondition The condition that specifies whether this entry is visible or not, if this returns true, then the entry is visible. You can leave this as the default, or set your own custom condition. public Func<EntryInfo, bool> EntryUnlockedCondition Field Value Func<EntryInfo, bool> Remarks Defaults to DefaultEntryUnlockedCondition(EntryInfo) LockedText The text / tip that is shown when attempting to read the entry while its locked, this could be anything you want, leave blank for no message. public string LockedText Field Value string TitleSprite The title image that gets displayed at the top when of the screen while reading the entry, if set to null, or if the image isn't found, some generated text will be placed instead public TitleSprite TitleSprite Field Value TitleSprite Remarks By title, I mean the name of the entry that is visible at the top while reading the entry UnlockID The ID of this entry, if the ID is found in the unlocked entries dictionary, this entry will be made visible public string UnlockID Field Value string Properties EntryIcon The name of the sprite in the atlas manager that will be used as the entry icon public string EntryIcon { set; } Property Value string EntryUnlocked Returns true if the entry is visible, else false public bool EntryUnlocked { get; } Property Value bool Methods DefaultEntryUnlockedCondition(EntryInfo) Checks whether any unlock tokens in Bestiary have the UnlockTokenType for CreatureID with a value that is equal to or lower than the required value public static bool DefaultEntryUnlockedCondition(EntryInfo info) Parameters info EntryInfo Returns bool True if the entry should be locked, otherwise false Equals(EntryInfo) Checks if this entry info's unlock id and icons match public bool Equals(EntryInfo other) Parameters other EntryInfo Returns bool"
  },
  "api/RainWorldBestiary.Types.OperationType.html": {
    "href": "api/RainWorldBestiary.Types.OperationType.html",
    "title": "Enum OperationType | Rain World Bestiary",
    "keywords": "Enum OperationType Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll A type of operation gate that can be applied to bools public enum OperationType Fields And = 0 True if both the values are true 0 - 0 = 0 1 - 0 = 0 0 - 1 = 0 1 - 1 = 1 NAnd = 3 True if either value is false 0 - 0 = 1 1 - 0 = 1 0 - 1 = 1 1 - 1 = 0 NOr = 4 True if neither value is true 0 - 0 = 1 1 - 0 = 0 0 - 1 = 0 1 - 1 = 0 Or = 1 True if either of the inputs are true 0 - 0 = 0 1 - 0 = 1 0 - 1 = 1 1 - 1 = 1 XAnd = 5 True if both values are the same 0 - 0 = 1 1 - 0 = 0 0 - 1 = 0 1 - 1 = 1 XOr = 2 True if either of the inputs are true, but not when both inputs are true 0 - 0 = 0 1 - 0 = 1 0 - 1 = 1 1 - 1 = 0"
  },
  "api/RainWorldBestiary.Types.TitleSprite.html": {
    "href": "api/RainWorldBestiary.Types.TitleSprite.html",
    "title": "Class TitleSprite | Rain World Bestiary",
    "keywords": "Class TitleSprite Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll Represents an element in the atlas manager, but gives some more options to customize the scale and offset of the image from the default values public class TitleSprite Inheritance object TitleSprite Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TitleSprite(string) public TitleSprite(string elementName) Parameters elementName string The name of the element in the atlas manager TitleSprite(string, float, int, int) public TitleSprite(string elementName, float scale, int xOffset = 0, int yOffset = 0) Parameters elementName string The name of the element in the atlas manager scale float The scale multiplier of this icon xOffset int The X Offset from the default position yOffset int The Y Offset from the default position Fields ElementName The name of the element in the atlas manager public string ElementName Field Value string Scale The scale of the image when drawn to the screen public float Scale Field Value float XOffset The offset on the X axis from the default position public int XOffset Field Value int YOffset THe offset on the Y axis from the default position public int YOffset Field Value int"
  },
  "api/RainWorldBestiary.Types.UnlockToken.html": {
    "href": "api/RainWorldBestiary.Types.UnlockToken.html",
    "title": "Class UnlockToken | Rain World Bestiary",
    "keywords": "Class UnlockToken Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll The base unlock token, used to register tokens so modules can be unlocked, inherited by CreatureUnlockToken which is used in DescriptionModule as the unlock ID public class UnlockToken : IEquatable<UnlockToken> Inheritance object UnlockToken Implements IEquatable<UnlockToken> Derived CreatureUnlockToken Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors UnlockToken() protected UnlockToken() UnlockToken(UnlockToken) Copy Operator public UnlockToken(UnlockToken other) Parameters other UnlockToken UnlockToken(UnlockTokenType, byte) public UnlockToken(UnlockTokenType tokenType, byte value = 1) Parameters tokenType UnlockTokenType The type of token to look for value byte The amount of times this token should be registered before this is considered unlocked Fields Count The amount of times this token has been registered, or needs to be registered public byte Count Field Value byte SpecialData Extra data that is tied to this token, you can see a list of extra data that is auto recorded (either to use, or as an example) in the README.md file on GitHub public List<string> SpecialData Field Value List<string> TokenType The type of token this module unlock targets public UnlockTokenType TokenType Field Value UnlockTokenType Methods ContainsSpecialData(List<string>) Checks if SpecialData contains all the provided special data public bool ContainsSpecialData(List<string> specialData) Parameters specialData List<string> Returns bool Equals(UnlockToken) public bool Equals(UnlockToken other) Parameters other UnlockToken Returns bool Remarks Checks if the token type matches Equals(UnlockToken, bool) public bool Equals(UnlockToken other, bool checkSpecialData) Parameters other UnlockToken checkSpecialData bool Returns bool Remarks Checks if the token type matches and, if checkSpecialData is enabled, if other's SpecialData is found in this SpecialData, ignores Count Equals(object) Checks if both objects are UnlockToken, then compares them using Equals(UnlockToken) public override bool Equals(object obj) Parameters obj object Returns bool Remarks Equals(UnlockToken) Checks if the token type matches GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Token Type + Value"
  },
  "api/RainWorldBestiary.Types.UnlockTokenType.html": {
    "href": "api/RainWorldBestiary.Types.UnlockTokenType.html",
    "title": "Enum UnlockTokenType | Rain World Bestiary",
    "keywords": "Enum UnlockTokenType Namespace RainWorldBestiary.Types Assembly RainWorldBestiary.dll The type of unlock public enum UnlockTokenType : byte Fields Eaten = 13 Whenever the creature gets eaten by the player Evaded = 2 For when the player evades the creature, by dodging an attack, climbing to a place it can't reach, etc GrabbedPlayer = 12 When the player is grabbed by the creature HeardPlayer = 18 When the creature hears the player Impaled = 9 When the creature gets impaled with a spear, by the player Killed = 8 When the creature is killed by the player KilledPlayer = 11 When the player is killed by the creature None = 0 This means this part of the description will always be visible if the entry is visible, however, unlike modules with no unlock token(s), this wont make the entry visible ObserveAttacking = 21 When the player observes the creature attacking another creature ObserveAttraction = 14 For whenever the player observes a creature being attracted to something, such as batflies to batnip ObserveBehaviour = 17 For whenever the player observes miscellaneous behaviour ObserveFear = 5 For when the player sees the creature run away in fear ObserveFood = 6 When the player sees the creature eating or hunting another creature ObserveGrabbing = 22 When the player observes the creature grabbing something, for any reason. This is just a generic grab, for grabbing a creature in the case of attacking, rivals, or food, use ObserveAttacking, ObserveRivals, and ObserveFood respectively ObserveHiding = 16 For whenever the player notices a creature hiding or disguising itself in any way ObserveHunting = 7 For when the player is getting chased by a creature ObserveRivals = 20 When the player observes the creature fighting another creature as a rival, like two lizards fighting for territory Observed = 4 When the player sees the creature PlayerGrabbed = 19 When the player grabs the creature or creatures corpse SnuckPast = 3 For when the player sneaks past a creature Stunned = 10 When the creature is stunned, by the player Tamed = 1 For when the player tames the creature UsedAsLure = 15 For whenever the player uses the creature to lure something else"
  },
  "api/RainWorldBestiary.Types.html": {
    "href": "api/RainWorldBestiary.Types.html",
    "title": "Namespace RainWorldBestiary.Types | Rain World Bestiary",
    "keywords": "Namespace RainWorldBestiary.Types Classes CreatureUnlockToken An unlock token, that can be used to detect whether a DescriptionModule is unlocked, similar to UnlockToken but has a CreatureID string Description A class representing an entries description, saved as a DescriptionModule array, but can be used as a string DescriptionModule A piece of a description, can be given a lock ID to lock this part of an entries description EntriesTab A class representing a tab full of entries in the bestiary EntriesTabList A class that represents a list of EntriesTab Entry A class representing an entry EntryInfo The contents of the entry file TitleSprite Represents an element in the atlas manager, but gives some more options to customize the scale and offset of the image from the default values UnlockToken The base unlock token, used to register tokens so modules can be unlocked, inherited by CreatureUnlockToken which is used in DescriptionModule as the unlock ID Enums OperationType A type of operation gate that can be applied to bools UnlockTokenType The type of unlock"
  },
  "api/RainWorldBestiary.html": {
    "href": "api/RainWorldBestiary.html",
    "title": "Namespace RainWorldBestiary | Rain World Bestiary",
    "keywords": "Namespace RainWorldBestiary Classes Bestiary The main class for the bestiary, everything should be accessible from this class Bestiary.Extensions A class with some extension methods, to add some partial support for adding your own entries through code Bestiary.Settings The class that holds all the remix menu options and their current values Extensions A class with some extensions to speed up certain tasks"
  },
  "articles/components/description.html": {
    "href": "articles/components/description.html",
    "title": "Description | Rain World Bestiary",
    "keywords": "Description Explanation \"unlock_token\" : UnlockToken Default = null The unlock token of this description module, use this if your module only has 1 condition, otherwise use \"unlock_ids\", used to determine what requirements need to be met to unlock this part of the description \"unlock_tokens\" : UnlockToken[] Default = [] The unlock tokens of this description module, use \"operation_against_value\" to determine which operation each module will use against the current value (defaults to and, meaning both this token and the previous token needs to be true for this entry to unlock). This is used to determine what requirements need to be met to unlock this part of the description \"body\" : string The text of this module, this gets run through the in game translator, so you can make the description something like \"ENTRY_BATFLY_APPEARANCE\", then define a translation into whatever language using the short strings dictionary in text\\text_eng\\strings.txt \"new_line\" : bool Default = false Whether this module and the previous module should be separated by a new line '\\n'. Otherwise just separates with a space. \"translate\" : bool Default = true Whether to run the body of this module through the in-game translator, if no translation is found, then nothing will happen"
  },
  "articles/components/entry.html": {
    "href": "articles/components/entry.html",
    "title": "Entries | Rain World Bestiary",
    "keywords": "Entries Explanation \"name\" : string Default = (The name of the file) While by default the name of the file is the name of the entry, you can override the name with this property, and instead, this value you set will become the name of entry. \"unlock_id\" : string Default = \"\" The id of the creature that will be used to unlock this entry. You can see the ID by using Bestiary.GetCreatureUnlockName(), or by going to AbstractCreature.creatureTemplate.name of an instance of your creature, and removing the spaces. \"locked_text\" : string Default = \"This entry is locked.\" The text / tip that is shown when attempting to read the entry while its locked. Can be used to show a tip on where to find the creature and so on. This gets run through the in game translator, so you can just give it an ID and add the translation logic for it in the short strings dictionary file. \"entry_icon\" : string The icon of the entry, use this if your entry only has 1 icon, otherwise use \"entry_icons\". This is the name of the icon in the atlas manager, make sure to load all your custom icons into the atlas manager, or nothing will happen. You can do this in code using: Futile.atlasManager.LoadImage() \"entry_icons\" : string[] The multiple icons of your entry, use this if your entry has multiple icons. This is an array of the names of your icons in the atlas manager, once again, make sure to load all your custom icons into the atlas manager, or nothing will happen. \"icons_next_to_title\" : bool Default = true Whether to show the entry's icon(s) next to the entry's title while reading the entry. \"title_sprite\" : TitleSprite Default = null The title image that gets displayed at the top of the screen while reading the entry, you can find more info on title sprites here. \"color\" : string* Default = dff5d6 The hex string for a color, (uses the last six characters of the string as the hex value) that determines the color of the entry's button when its unlocked. \"description\" : Description The description of the entry."
  },
  "articles/components/tabs.html": {
    "href": "articles/components/tabs.html",
    "title": "Tabs | Rain World Bestiary",
    "keywords": "Tabs Explanation \"name\" : string Default = (The name of the file) The name of the tab. \"title_sprite\" : TitleSprite Default = null The image that is displayed at the top of the tab while viewing it, this is the title image that displays the name of the tab. \"path\" : string Default = null The local path to the folder that contains your entries, this is a local path from your mods folder, so if your tabs are in the folder \\*mod directory*\\bestiary\\mytab, you would set this to bestiary\\mytab, as your mods folder path is prepended. \"required_mods\" : string[] Default = [] All the mods (by their IDs) that have to be active for this tab to be visible, if one of the ids specified is not an active mod, the tab wont be visible."
  },
  "articles/components/title-sprite.html": {
    "href": "articles/components/title-sprite.html",
    "title": "Title Sprite | Rain World Bestiary",
    "keywords": "Title Sprite Explanation \"element_name\" : string This is the name of your title element in the atlas manager, make sure to load your title into the atlas manager, or nothing will happen. You can do this in code using: Futile.atlasManager.LoadImage() \"scale\" : float Default = 1 The scale multiplier for your image, this will affect the size of your image on screen. \"x_offset\" : int While the sprite is automatically centered, the image might be just a little bit off, so this is here to allow you to add an offset to it, positive numbers send the image to the right, while negative sends it to the left. \"y_offset\" : int Same logic with the X offset, you might need some extra distance from the top of the screen, or maybe less, so positive brings the image down, while negative lifts your sprite up."
  },
  "articles/components/unlock-token.html": {
    "href": "articles/components/unlock-token.html",
    "title": "Unlock Token | Rain World Bestiary",
    "keywords": "Unlock Token Explanation \"operation_against_value\" : OperationType Default = And The operation this unlock token will use to compare against the current unlock state of the module. For example, if all the previous tokens determine the module should be visible, it will compare the result of this token against that value to get the result. To add more details, lets say all the previous tokens ended with a result of true, meaning the module should be visible, if this tokens value is false, and the operation type is or, that it will check if the current result of true OR if this tokens value of false are true. The same goes with the and operation, it will check if the current result of true AND this tokens value of false are true. You can check the template entries for some more details if this is still confusing. \"token_type\" : TokenType Default = null A TokenType that represents the token type of this unlock, you can see a list of token types in the misc category, as well as their respective names and id's. The token type determines what action should happen with a creature before this module is unlocked, such as the player killing the creature, or the other way around. To specify a specific token type you can either enter its name or its id, as either a string or an int. \"creature_id\" : string The name of this creature that this unlock token should check for, you don't want any creature killing the player to unlock this part of the description, so you set the creature id to say which creature specifically, same rules with the creature ID apply with the entry's unlock ID. \"count\" : byte Default = 1 A number (max 255) that represents how many times the unlock token, defined by token_type and creature_id, should be registered before this token is considered valid. Examples include needing to kill 4-5 of the creature before this module is unlocked (which you would set the value to 4 or 5 depending on what your after), and so on. \"special_data\" : string[] Special data is data that can be added to unlock tokens to give some specifics about which interactions the player should've had before this unlock token is valid, if all the strings in here are found in the registered unlock token, this will be considered valid."
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | Rain World Bestiary",
    "keywords": "Introduction The Bestiary aims to make entries slowly unlock as the player discovers things about the creature. We wanted to allow other modders to also create their own entries for the Bestiary, while making sure the Bestiary stays completely optional (so that no one is forced to download it even if their favorite additional creatures mod has entries). That did make the Bestiary somewhat complicated, so we've made this documentation site to hopefully guide other developers into creating their own entries. Entries Adding Methods Entries can be made in two ways, through code, and through JSON files placed in your mod. There are ways to add entries without making the Bestiary a dependency; With JSON files, this is done automatically, as the Bestiary can only load your entries if it is active; With code however, you must take an additional step, You can read more on how to do this here. Through Code While adding entries through code is possible, it's not fully supported, and it's recommended you add entries through JSON files. Adding entries through code does give slightly more customization, such as setting a custom unlock condition, and custom module unlock conditions. Through JSON Files Using JSON Files gives you slightly less control, but is fully supported, and gives some advantages such as the bestiary managing the loading and unloading of your entries."
  },
  "articles/misc/operation-type.html": {
    "href": "articles/misc/operation-type.html",
    "title": "Operation Type | Rain World Bestiary",
    "keywords": "Operation Type The operation this unlock token will perform against the current unlock value of the token. Here is a list of all operations, like with TokenType, you can set it as either the name or the id in the JSON file. 0 = false, 1 = true And = 0 : True if both the values are true 0 : 0 = 0 1 : 0 = 0 0 : 1 = 0 1 : 1 = 1 OR = 1 : True if either of the inputs are true 0 : 0 = 0 1 : 0 = 1 0 : 1 = 1 1 : 1 = 1 XOr = 2 : True if either of the inputs are true, but not when both inputs are true 0 : 0 = 0 1 : 0 = 1 0 : 1 = 1 1 : 1 = 0 NAnd = 3 : True if either value is false 0 : 0 = 1 1 : 0 = 1 0 : 1 = 1 1 : 1 = 0 Nor = 4 : True if neither value is true 0 : 0 = 1 1 : 0 = 0 0 : 1 = 0 1 : 1 = 0 XAnd = 4 : True if both values are the same 0 : 0 = 1 1 : 0 = 0 0 : 1 = 0 1 : 1 = 1"
  },
  "articles/misc/special-data.html": {
    "href": "articles/misc/special-data.html",
    "title": "Special Data | Rain World Bestiary",
    "keywords": "Special Data Special data is data that can be added to unlock tokens to give some specifics to which interactions the player has had, and allows you to set more defined unlock logic for your modules. Below you can see a list of which data is automatically tracked and for which tokens. Player Grabbed: When the player grabs a creature Adds \"Dead\" or \"Alive\" depending on the status of the creature when its grabbed. Observe Food: For when the player sees the creature want to eat something or eating something Adds the unlock name of the creature that was attacked / eaten Observe Attacking: When the player observes the creature attacking another creature, excluding food Adds the unlock name of the creature that was attacked Observe Rivals: When the player observes the creature fighting another creature as a rival, like two lizards fighting for territory Adds the unlock name of the creature that this creature was competing with"
  },
  "articles/misc/token-type.html": {
    "href": "articles/misc/token-type.html",
    "title": "Unlock Token Types | Rain World Bestiary",
    "keywords": "Unlock Token Types Unlock Tokens Here is a full list of all unlock tokens, further down you can see a list of which tokens are automatically tracked, although despite them being automatically tracked, you can also just track them manually, if you'd like. To specify a specific token type in a JSON file, you can either enter its name or its id, as either a string or an int. None = 0 : This means this part of the description will always be visible if the entry is visible, however, unlike modules with no unlock token(s), this wont make the entry visible Tamed = 1 : For when the player tames the creature Evaded = 2 : For when the player evades the creature Snuck Past = 3 : For when the player sneaks past the creature Observed = 4 : For when the player sees the creature Observe Fear = 5 : For when the player sees the creature fear something Observe Food = 6 : For when the player sees the creature want to eat something or eating something Observe Hunting = 7 : For when the player gets hunted / chased by the creature Killed = 8 : When the creature gets killed by the player Impaled = 9 : When the creature gets impaled with a spear, by the player Stunned = 10 : When the creature gets stunned with a rock, by the player Killed Player = 11 : When the player is killed by the creature Grabbed Player = 12 : When the player gets grabbed by the creature Eaten = 13 : When the player eats the creature Observe Attraction = 14 : For when the player observes a creature being attracted to something, like batflies to batnip, etc Used As Lure = 15 : For when the player uses the creature to lure / distract something else Observe Hiding = 16 : For when the player observes a creature hiding Observe Behaviour = 17 : For when the player observes a creature doing a behaviour Heard Player = 18 : When a creature hears the player Player Grabbed = 19 : When the player grabs the creature Observe Rivals = 20 : When the player observes the creature fighting another creature as a rival, like two lizards fighting for territory Observe Attacking = 21 : When the player observes the creature attacking another creature Automatic Automatic unlock tokens are tokens that are automatically tracked and added by the Bestiary. Please keep in mind, that most if not all of these tokens are only tracked for creatures that inherit from base game types, such as the Creature class , AbstractCreature class, and so on. Here is a list of all current automatic token types: Observe Food = 6 : For when the player sees the creature want to eat something or eating something Killed = 8 : When the creature gets killed by the player Impaled = 9 : When the creature gets impaled with a spear, by the player Stunned = 10 : When the creature gets stunned with a rock, by the player Killed Player = 11 : When the player is killed by the creature Grabbed Player = 12 : When the player gets grabbed by the creature Eaten = 13 : When the player eats the creature Heard Player = 18 : When the creature hears the player Player Grabbed = 19 : When the player grabs the creature Observe Rivals = 20 : When the player observes the creature fighting another creature as a rival, like two lizards fighting for territory Observe Attacking = 21 : When the player observes the creature attacking another creature, excluding food"
  },
  "articles/structure.html": {
    "href": "articles/structure.html",
    "title": "Structure | Rain World Bestiary",
    "keywords": "Structure Tabs Tabs are categories / collections that entries are stored in, they appear as the first set of buttons you see when entering the Bestiary menu. Tabs are categories that entries are stored in, they appear as the first set of buttons you see when entering the bestiary menu. When adding entries, you can add your own tab, or you can use the Modded tab, for if your mod only adds a few entries. To add entries to the Modded tab, make sure your tabs name is also Modded (case sensitive), two tabs with the same name will be merged. Merging Tabs When merging tabs, the Bestiary adds all the entries from the new tab into the existing tab. To merge your entries into another tab, simply create a tab with the same name as an existing tab, if the name already exists, it'll merge the two tabs, this is your tabs name before it's translated, and this is not case sensitive. If your tab has a custom Title Sprite, and the existing tab doesn't, your tabs title sprite will be used. Entries Entries are the individual documents that hold all the text for the given creature. The entry will use the file name as the default name for the entry, this can however be overridden with the name property. Entries also don't care what sub directory they are in, as the entry loader looks for all files in the tab folder, including entries in sub-directories. Description The Description is an array of description modules, these modules have a unique unlock condition using unlock tokens; With these conditions, each part of a description is individually unlocked as the player makes discoveries about a creature. Each module holds its text and an array of unlock tokens which determines what criteria should be met to unlock that module. Unlock Tokens Unlock tokens are the way the bestiary determines what parts of descriptions can be unlocked, you can define your own unlock token to set a condition on when each module should be made available. Title Sprite The title that appears at the top of a tab or entry while reading it. This usually shows the name of an entry, but really can be set to anything you want. If set to null or if the image isn't found in the atlas manager, an auto generated title will be placed instead."
  },
  "articles/walkthrough.html": {
    "href": "articles/walkthrough.html",
    "title": "Walkthrough | Rain World Bestiary",
    "keywords": "Walkthrough To get a grasp on the Structure of how to add your own entries, you should download the mod template here. Default This walkthrough is assuming you already have your mod set up, if this isn't the case, you should set up your mod, or you can head over to the Modding Wiki for more information on how to mod the game. Now that you have your mod ready to go, lets add some Bestiary entries. Here you can see an example of the basic structure of a Rain World Mod, for this example the mod doesn't do anything, all we've got is the illustrations (sprites) folder and the text (translations) folder, + the two files required for a mod to be registered in game. First of all lets add the bestiary folder into our mod, this is the only folder the Bestiary actually accesses to check for plugins, tabs, and entries, so it's necessary if you want to add anything to the Bestiary. Now that we've added the folder, we're going to decide what tab we want our entry to be in, tabs are categories that entries are stored in, these categories are used for separating different entries, such as the base Rain World entries from Downpour entries, and so on. To create a new tab, we'll make a folder to hold the entries that are in that tab, and a new JSON file that will tell the bestiary the tab exists. The names of this folder and JSON file don't matter. We will add two properties to our tab: path -> We have to tell the Bestiary which folder this tab uses to store its entries, this is the folder starting from your mods root directory, so in this case our folder is called MyTab, so we will set the path property to bestiary\\\\MyTab. and name -> We also have to specify a name for our tab, if this is left blank, the bestiary will use the name of the file as the tabs name. With the name we can do two things, we can set the name to be the same as an already existing tab, which will cause the two tabs to merge together, or we can set a unique name to create an entirely new tab; You can read more on merging tabs here. For this example, we will create a new tab which we will call My Tab, just to keep things simple. Your tabs JSON file should look something like this: { \"name\": \"My Tab\", \"path\": \"bestiary\\\\MyTab\" } Next To Do To Do To Do Plugins Template Walkthrough The template is a template mod, meaning its an entire Rain World mod with the Bestiary entries added in. The purpose of this template is to show how entries should be placed in your mods folder. To take the entries and tabs out of the template just drag the bestiary folder into your mod."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Rain World Bestiary",
    "keywords": "The Bestiary is a mod that adds an encyclopedia of creatures to Rain World, this bestiary unlocks as you interact with creatures, only displaying information the user has hopefully figured out by themselves. If you have a feedback or a suggestion, feel free to submit a ticket here. Source Code: https://github.com/Oxyaine/RainWorldBestiary Check out the walkthrough and the template to familiarize yourself with the mod. Or you can check out the JSON Components if you are already familiar with the Bestiary."
  }
}