### YamlMime:ManagedReference
items:
- uid: RainWorldBestiary.Extensions
  commentId: T:RainWorldBestiary.Extensions
  id: Extensions
  parent: RainWorldBestiary
  children:
  - RainWorldBestiary.Extensions.ARGBToHexString(UnityEngine.Color)
  - RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.List{``0},``0[])
  - RainWorldBestiary.Extensions.ContainsAny(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  - RainWorldBestiary.Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0})
  - RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - RainWorldBestiary.Extensions.HexToColor(System.String)
  - RainWorldBestiary.Extensions.IndexOf(System.String,System.Char,System.Int32,System.Boolean)
  - RainWorldBestiary.Extensions.RGBToHexString(UnityEngine.Color)
  - RainWorldBestiary.Extensions.SplitIntoGroups(System.String,System.Int32)
  - RainWorldBestiary.Extensions.ToHSL(UnityEngine.Color)
  - RainWorldBestiary.Extensions.ToVector2(RWCustom.IntVector2)
  - RainWorldBestiary.Extensions.ToVector2(WorldCoordinate)
  - RainWorldBestiary.Extensions.WrapText(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: RainWorldBestiary.Extensions
  type: Class
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: A class with some extensions to speed up certain tasks
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: RainWorldBestiary.Extensions.WrapText(System.String,System.Int32)
  commentId: M:RainWorldBestiary.Extensions.WrapText(System.String,System.Int32)
  id: WrapText(System.String,System.Int32)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: WrapText(string, int)
  nameWithType: Extensions.WrapText(string, int)
  fullName: RainWorldBestiary.Extensions.WrapText(string, int)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Wrap the text to go along multiple lines (word wrap). If the current letter count exceeds <code class="paramref">wrapCount</code> it adds a new line (\n) to the string
  example: []
  syntax:
    content: public static string WrapText(this string text, int wrapCount)
    parameters:
    - id: text
      type: System.String
    - id: wrapCount
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function WrapText(text As String, wrapCount As Integer) As String
  overload: RainWorldBestiary.Extensions.WrapText*
  nameWithType.vb: Extensions.WrapText(String, Integer)
  fullName.vb: RainWorldBestiary.Extensions.WrapText(String, Integer)
  name.vb: WrapText(String, Integer)
- uid: RainWorldBestiary.Extensions.SplitIntoGroups(System.String,System.Int32)
  commentId: M:RainWorldBestiary.Extensions.SplitIntoGroups(System.String,System.Int32)
  id: SplitIntoGroups(System.String,System.Int32)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: SplitIntoGroups(string, int)
  nameWithType: Extensions.SplitIntoGroups(string, int)
  fullName: RainWorldBestiary.Extensions.SplitIntoGroups(string, int)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Splits the string into groups the size of <code class="paramref">groupCount</code>, if the string cannot be split evenly, the last group may contain an unexpected amount of characters
  example: []
  syntax:
    content: public static string[] SplitIntoGroups(this string text, int groupCount)
    parameters:
    - id: text
      type: System.String
    - id: groupCount
      type: System.Int32
    return:
      type: System.String[]
    content.vb: Public Shared Function SplitIntoGroups(text As String, groupCount As Integer) As String()
  overload: RainWorldBestiary.Extensions.SplitIntoGroups*
  nameWithType.vb: Extensions.SplitIntoGroups(String, Integer)
  fullName.vb: RainWorldBestiary.Extensions.SplitIntoGroups(String, Integer)
  name.vb: SplitIntoGroups(String, Integer)
- uid: RainWorldBestiary.Extensions.ContainsAny(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  commentId: M:RainWorldBestiary.Extensions.ContainsAny(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  id: ContainsAny(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ContainsAny(List<string>, List<string>)
  nameWithType: Extensions.ContainsAny(List<string>, List<string>)
  fullName: RainWorldBestiary.Extensions.ContainsAny(System.Collections.Generic.List<string>, System.Collections.Generic.List<string>)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Checks if <code class="paramref">source</code> contains any of the strings in <code class="paramref">values</code>
  example: []
  syntax:
    content: public static bool ContainsAny(this List<string> source, List<string> values)
    parameters:
    - id: source
      type: System.Collections.Generic.List{System.String}
    - id: values
      type: System.Collections.Generic.List{System.String}
    return:
      type: System.Boolean
    content.vb: Public Shared Function ContainsAny(source As List(Of String), values As List(Of String)) As Boolean
  overload: RainWorldBestiary.Extensions.ContainsAny*
  nameWithType.vb: Extensions.ContainsAny(List(Of String), List(Of String))
  fullName.vb: RainWorldBestiary.Extensions.ContainsAny(System.Collections.Generic.List(Of String), System.Collections.Generic.List(Of String))
  name.vb: ContainsAny(List(Of String), List(Of String))
- uid: RainWorldBestiary.Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:RainWorldBestiary.Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ContainsAny<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.ContainsAny<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: RainWorldBestiary.Extensions.ContainsAny<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Checks if <code class="paramref">source</code> contains any of the strings in <code class="paramref">values</code>
  example: []
  syntax:
    content: public static bool ContainsAny<T>(this IEnumerable<T> source, IEnumerable<T> values)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function ContainsAny(Of T)(source As IEnumerable(Of T), values As IEnumerable(Of T)) As Boolean
  overload: RainWorldBestiary.Extensions.ContainsAny*
  nameWithType.vb: Extensions.ContainsAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: RainWorldBestiary.Extensions.ContainsAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ContainsAny(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.List{``0},``0[])
  commentId: M:RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.List{``0},``0[])
  id: ContainsAll``1(System.Collections.Generic.List{``0},``0[])
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ContainsAll<T>(List<T>, T[])
  nameWithType: Extensions.ContainsAll<T>(List<T>, T[])
  fullName: RainWorldBestiary.Extensions.ContainsAll<T>(System.Collections.Generic.List<T>, T[])
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Checks if this list contains all the values in <code class="paramref">values</code>
  example: []
  syntax:
    content: public static bool ContainsAll<T>(this List<T> list, T[] values)
    parameters:
    - id: list
      type: System.Collections.Generic.List{{T}}
    - id: values
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: True if all items in <code class="paramref">values</code> are found in this list
    content.vb: Public Shared Function ContainsAll(Of T)(list As List(Of T), values As T()) As Boolean
  overload: RainWorldBestiary.Extensions.ContainsAll*
  nameWithType.vb: Extensions.ContainsAll(Of T)(List(Of T), T())
  fullName.vb: RainWorldBestiary.Extensions.ContainsAll(Of T)(System.Collections.Generic.List(Of T), T())
  name.vb: ContainsAll(Of T)(List(Of T), T())
- uid: RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:RainWorldBestiary.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ContainsAll<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.ContainsAll<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: RainWorldBestiary.Extensions.ContainsAll<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Checks if this list contains all the values in <code class="paramref">values</code>
  example: []
  syntax:
    content: public static bool ContainsAll<T>(this IEnumerable<T> list, IEnumerable<T> values)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: True if all items in <code class="paramref">values</code> are found in this list
    content.vb: Public Shared Function ContainsAll(Of T)(list As IEnumerable(Of T), values As IEnumerable(Of T)) As Boolean
  overload: RainWorldBestiary.Extensions.ContainsAll*
  nameWithType.vb: Extensions.ContainsAll(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: RainWorldBestiary.Extensions.ContainsAll(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: ContainsAll(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0})
  id: GetRandom``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: GetRandom<T>(IEnumerable<T>)
  nameWithType: Extensions.GetRandom<T>(IEnumerable<T>)
  fullName: RainWorldBestiary.Extensions.GetRandom<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Gets a random item in the collection
  example: []
  syntax:
    content: public static T GetRandom<T>(this IEnumerable<T> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function GetRandom(Of T)(values As IEnumerable(Of T)) As T
  overload: RainWorldBestiary.Extensions.GetRandom*
  nameWithType.vb: Extensions.GetRandom(Of T)(IEnumerable(Of T))
  fullName.vb: RainWorldBestiary.Extensions.GetRandom(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: GetRandom(Of T)(IEnumerable(Of T))
- uid: RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:RainWorldBestiary.Extensions.GetRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: GetRandom<T>(IEnumerable<T>, int)
  nameWithType: Extensions.GetRandom<T>(IEnumerable<T>, int)
  fullName: RainWorldBestiary.Extensions.GetRandom<T>(System.Collections.Generic.IEnumerable<T>, int)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Gets a number of random items from the collection
  example: []
  syntax:
    content: public static T[] GetRandom<T>(this IEnumerable<T> values, int amountToGet)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: amountToGet
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function GetRandom(Of T)(values As IEnumerable(Of T), amountToGet As Integer) As T()
  overload: RainWorldBestiary.Extensions.GetRandom*
  nameWithType.vb: Extensions.GetRandom(Of T)(IEnumerable(Of T), Integer)
  fullName.vb: RainWorldBestiary.Extensions.GetRandom(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: GetRandom(Of T)(IEnumerable(Of T), Integer)
- uid: RainWorldBestiary.Extensions.ToVector2(RWCustom.IntVector2)
  commentId: M:RainWorldBestiary.Extensions.ToVector2(RWCustom.IntVector2)
  id: ToVector2(RWCustom.IntVector2)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ToVector2(IntVector2)
  nameWithType: Extensions.ToVector2(IntVector2)
  fullName: RainWorldBestiary.Extensions.ToVector2(RWCustom.IntVector2)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Converts this <xref href="RWCustom.IntVector2" data-throw-if-not-resolved="false"></xref> into a <xref href="UnityEngine.Vector2" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static Vector2 ToVector2(this IntVector2 intVector)
    parameters:
    - id: intVector
      type: RWCustom.IntVector2
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function ToVector2(intVector As IntVector2) As Vector2
  overload: RainWorldBestiary.Extensions.ToVector2*
- uid: RainWorldBestiary.Extensions.ToVector2(WorldCoordinate)
  commentId: M:RainWorldBestiary.Extensions.ToVector2(WorldCoordinate)
  id: ToVector2(WorldCoordinate)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ToVector2(WorldCoordinate)
  nameWithType: Extensions.ToVector2(WorldCoordinate)
  fullName: RainWorldBestiary.Extensions.ToVector2(WorldCoordinate)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Gets the x and y of this <xref href="WorldCoordinate" data-throw-if-not-resolved="false"></xref> and returns it as a Vector2
  example: []
  syntax:
    content: public static Vector2 ToVector2(this WorldCoordinate coordinate)
    parameters:
    - id: coordinate
      type: WorldCoordinate
    return:
      type: UnityEngine.Vector2
    content.vb: Public Shared Function ToVector2(coordinate As WorldCoordinate) As Vector2
  overload: RainWorldBestiary.Extensions.ToVector2*
- uid: RainWorldBestiary.Extensions.ToHSL(UnityEngine.Color)
  commentId: M:RainWorldBestiary.Extensions.ToHSL(UnityEngine.Color)
  id: ToHSL(UnityEngine.Color)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ToHSL(Color)
  nameWithType: Extensions.ToHSL(Color)
  fullName: RainWorldBestiary.Extensions.ToHSL(UnityEngine.Color)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Converts this RGB color to a HSL color
  example: []
  syntax:
    content: public static HSLColor ToHSL(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
    return:
      type: HSLColor
    content.vb: Public Shared Function ToHSL(color As Color) As HSLColor
  overload: RainWorldBestiary.Extensions.ToHSL*
- uid: RainWorldBestiary.Extensions.HexToColor(System.String)
  commentId: M:RainWorldBestiary.Extensions.HexToColor(System.String)
  id: HexToColor(System.String)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: HexToColor(string)
  nameWithType: Extensions.HexToColor(string)
  fullName: RainWorldBestiary.Extensions.HexToColor(string)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Converts this hex color string into a Color
  example: []
  syntax:
    content: public static Color HexToColor(this string hex)
    parameters:
    - id: hex
      type: System.String
    return:
      type: UnityEngine.Color
    content.vb: Public Shared Function HexToColor(hex As String) As Color
  overload: RainWorldBestiary.Extensions.HexToColor*
  nameWithType.vb: Extensions.HexToColor(String)
  fullName.vb: RainWorldBestiary.Extensions.HexToColor(String)
  name.vb: HexToColor(String)
- uid: RainWorldBestiary.Extensions.RGBToHexString(UnityEngine.Color)
  commentId: M:RainWorldBestiary.Extensions.RGBToHexString(UnityEngine.Color)
  id: RGBToHexString(UnityEngine.Color)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: RGBToHexString(Color)
  nameWithType: Extensions.RGBToHexString(Color)
  fullName: RainWorldBestiary.Extensions.RGBToHexString(UnityEngine.Color)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Converts this Color into a hex color string, with 6 characters in the string, representing RGB
  example: []
  syntax:
    content: public static string RGBToHexString(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
    return:
      type: System.String
    content.vb: Public Shared Function RGBToHexString(color As Color) As String
  overload: RainWorldBestiary.Extensions.RGBToHexString*
- uid: RainWorldBestiary.Extensions.ARGBToHexString(UnityEngine.Color)
  commentId: M:RainWorldBestiary.Extensions.ARGBToHexString(UnityEngine.Color)
  id: ARGBToHexString(UnityEngine.Color)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: ARGBToHexString(Color)
  nameWithType: Extensions.ARGBToHexString(Color)
  fullName: RainWorldBestiary.Extensions.ARGBToHexString(UnityEngine.Color)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  summary: Converts this Color into a hex color string, with 8 characters in the string, representing ARGB
  example: []
  syntax:
    content: public static string ARGBToHexString(this Color color)
    parameters:
    - id: color
      type: UnityEngine.Color
    return:
      type: System.String
    content.vb: Public Shared Function ARGBToHexString(color As Color) As String
  overload: RainWorldBestiary.Extensions.ARGBToHexString*
- uid: RainWorldBestiary.Extensions.IndexOf(System.String,System.Char,System.Int32,System.Boolean)
  commentId: M:RainWorldBestiary.Extensions.IndexOf(System.String,System.Char,System.Int32,System.Boolean)
  id: IndexOf(System.String,System.Char,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: RainWorldBestiary.Extensions
  langs:
  - csharp
  - vb
  name: IndexOf(string, char, int, bool)
  nameWithType: Extensions.IndexOf(string, char, int, bool)
  fullName: RainWorldBestiary.Extensions.IndexOf(string, char, int, bool)
  type: Method
  assemblies:
  - RainWorldBestiary
  namespace: RainWorldBestiary
  example: []
  syntax:
    content: public static int IndexOf(this string text, char value, int startIndex, bool ignoreWithinQuotes)
    parameters:
    - id: text
      type: System.String
      description: ''
    - id: value
      type: System.Char
      description: ''
    - id: startIndex
      type: System.Int32
      description: ''
    - id: ignoreWithinQuotes
      type: System.Boolean
      description: Whether to ignore if the character is found within double quotes
    return:
      type: System.Int32
    content.vb: Public Shared Function IndexOf(text As String, value As Char, startIndex As Integer, ignoreWithinQuotes As Boolean) As Integer
  overload: RainWorldBestiary.Extensions.IndexOf*
  nameWithType.vb: Extensions.IndexOf(String, Char, Integer, Boolean)
  fullName.vb: RainWorldBestiary.Extensions.IndexOf(String, Char, Integer, Boolean)
  name.vb: IndexOf(String, Char, Integer, Boolean)
references:
- uid: RainWorldBestiary
  commentId: N:RainWorldBestiary
  isExternal: true
  href: RainWorldBestiary.html
  name: RainWorldBestiary
  nameWithType: RainWorldBestiary
  fullName: RainWorldBestiary
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: RainWorldBestiary.Extensions.WrapText*
  commentId: Overload:RainWorldBestiary.Extensions.WrapText
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_WrapText_System_String_System_Int32_
  name: WrapText
  nameWithType: Extensions.WrapText
  fullName: RainWorldBestiary.Extensions.WrapText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: RainWorldBestiary.Extensions.SplitIntoGroups*
  commentId: Overload:RainWorldBestiary.Extensions.SplitIntoGroups
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_SplitIntoGroups_System_String_System_Int32_
  name: SplitIntoGroups
  nameWithType: Extensions.SplitIntoGroups
  fullName: RainWorldBestiary.Extensions.SplitIntoGroups
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: RainWorldBestiary.Extensions.ContainsAny*
  commentId: Overload:RainWorldBestiary.Extensions.ContainsAny
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_ContainsAny_System_Collections_Generic_List_System_String__System_Collections_Generic_List_System_String__
  name: ContainsAny
  nameWithType: Extensions.ContainsAny
  fullName: RainWorldBestiary.Extensions.ContainsAny
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: RainWorldBestiary.Extensions.ContainsAll*
  commentId: Overload:RainWorldBestiary.Extensions.ContainsAll
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_ContainsAll__1_System_Collections_Generic_List___0____0___
  name: ContainsAll
  nameWithType: Extensions.ContainsAll
  fullName: RainWorldBestiary.Extensions.ContainsAll
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: RainWorldBestiary.Extensions.GetRandom*
  commentId: Overload:RainWorldBestiary.Extensions.GetRandom
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_GetRandom__1_System_Collections_Generic_IEnumerable___0__
  name: GetRandom
  nameWithType: Extensions.GetRandom
  fullName: RainWorldBestiary.Extensions.GetRandom
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  name: T
  nameWithType: T
  fullName: T
- uid: RWCustom.IntVector2
  commentId: T:RWCustom.IntVector2
  isExternal: true
  name: IntVector2
  nameWithType: IntVector2
  fullName: RWCustom.IntVector2
- uid: UnityEngine.Vector2
  commentId: T:UnityEngine.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: UnityEngine.Vector2
- uid: RainWorldBestiary.Extensions.ToVector2*
  commentId: Overload:RainWorldBestiary.Extensions.ToVector2
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_ToVector2_RWCustom_IntVector2_
  name: ToVector2
  nameWithType: Extensions.ToVector2
  fullName: RainWorldBestiary.Extensions.ToVector2
- uid: WorldCoordinate
  commentId: T:WorldCoordinate
  isExternal: true
  name: WorldCoordinate
  nameWithType: WorldCoordinate
  fullName: WorldCoordinate
- uid: RainWorldBestiary.Extensions.ToHSL*
  commentId: Overload:RainWorldBestiary.Extensions.ToHSL
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_ToHSL_UnityEngine_Color_
  name: ToHSL
  nameWithType: Extensions.ToHSL
  fullName: RainWorldBestiary.Extensions.ToHSL
- uid: UnityEngine.Color
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: UnityEngine.Color
- uid: HSLColor
  isExternal: true
  name: HSLColor
  nameWithType: HSLColor
  fullName: HSLColor
- uid: RainWorldBestiary.Extensions.HexToColor*
  commentId: Overload:RainWorldBestiary.Extensions.HexToColor
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_HexToColor_System_String_
  name: HexToColor
  nameWithType: Extensions.HexToColor
  fullName: RainWorldBestiary.Extensions.HexToColor
- uid: RainWorldBestiary.Extensions.RGBToHexString*
  commentId: Overload:RainWorldBestiary.Extensions.RGBToHexString
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_RGBToHexString_UnityEngine_Color_
  name: RGBToHexString
  nameWithType: Extensions.RGBToHexString
  fullName: RainWorldBestiary.Extensions.RGBToHexString
- uid: RainWorldBestiary.Extensions.ARGBToHexString*
  commentId: Overload:RainWorldBestiary.Extensions.ARGBToHexString
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_ARGBToHexString_UnityEngine_Color_
  name: ARGBToHexString
  nameWithType: Extensions.ARGBToHexString
  fullName: RainWorldBestiary.Extensions.ARGBToHexString
- uid: RainWorldBestiary.Extensions.IndexOf*
  commentId: Overload:RainWorldBestiary.Extensions.IndexOf
  isExternal: true
  href: RainWorldBestiary.Extensions.html#RainWorldBestiary_Extensions_IndexOf_System_String_System_Char_System_Int32_System_Boolean_
  name: IndexOf
  nameWithType: Extensions.IndexOf
  fullName: RainWorldBestiary.Extensions.IndexOf
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
